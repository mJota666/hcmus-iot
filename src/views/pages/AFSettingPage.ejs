<div
  class="relative flex flex-col sm:flex-row justify-between gap-6 items-center bg-gray-400 p-6 font-MuseoModerno"
  style="height: 92vh; width: 100vw"
>
  <div
    id="calendar"
    class="w-full h-3/6 sm:w-5/12 sm:h-full rounded-2xl shadow-xl bg-white flex flex-col justify-center items-center"
  >
    <div class="font-bold text-sm sm:text-2xl">Calendar</div>
  </div>
  <div
    id="auto-turn-fan"
    class="w-full h-3/6 sm:w-7/12 sm:h-full rounded-2xl shadow-xl bg-white flex flex-col justify-center items-center"
  >
    <div class="font-bold text-sm sm:text-2xl w-full h-1/6 flex flex-col justify-center items-center">Setting Time Turning Fan</div>
    <div class="w-full h-5/6 flex flex-col justify-start items-center gap-4 pt-">
      <div class="p-4 w-3/5 h-16 bg-gray-400 rounded-3xl shadow-2xl text-center flex justify-between items-center">
        <span>Start Date</span>
        <input type="date" id="start-date" class="w-3/4 p-2 rounded-xl" required/>
      </div>
      <div class="p-4 w-3/5 h-16 bg-gray-400 rounded-3xl shadow-2xl text-center flex justify-between items-center">
        <span>End Date</span>
        <input type="date" id="end-date" class="w-3/4 p-2 rounded-xl" required/>
      </div>
      <div class="p-4 w-3/5 h-16 bg-gray-400 rounded-3xl shadow-2xl text-center flex justify-between items-center">
        <span>Start Time</span>
        <input type="time" id="start-time" class="w-3/4 p-2 rounded-xl" required/>
      </div>
      <div class="p-4 w-3/5 h-16 bg-gray-400 rounded-3xl shadow-2xl text-center flex justify-between items-center">
        <span>End Time</span>
        <input type="time" id="end-time" class="w-3/4 p-2 rounded-xl" required/>
      </div>
      <div class="p-4 w-3/5 h-16 bg-gray-400 rounded-3xl shadow-2xl text-center flex justify-between items-center">
        <span>Mode</span>
        <select id="mode" class="w-3/4 p-2 rounded-xl" required>
          <option value="1">Mode 1</option>
          <option value="2">Mode 2</option>
          <option value="3">Mode 3</option>
        </select>
      </div>
    
      <button id="submitSettingTime" class="w-3/5 h-10 bg-blue-500 text-white rounded-3xl hover:bg-blue-700 transition-all duration-300 shadow-2xl text-center flex justify-center items-center">Submit Setting Time</button>
    </div>
  </div>
</div>
<script>
  // Get the submit button
  const submitButton = document.getElementById("submitSettingTime");

  // Handle the submit button click
  submitButton.addEventListener("click", () => {
    const startDate = document.getElementById("start-date").value;
    const endDate = document.getElementById("end-date").value;
    const startTime = document.getElementById("start-time").value;
    const endTime = document.getElementById("end-time").value;
    const mode = document.getElementById("mode").value;


    // Convert date and time to UNIX timestamps
    const toUnixTimestamp = (date, time) => {
      const combined = `${date}T${time}:00Z`;
      return Math.floor(new Date(combined).getTime() / 1000);
    };
    const startDateTimestamp = toUnixTimestamp(startDate, startTime);
    const endDateTimestamp = toUnixTimestamp(endDate, endTime);

    // Prepare the data
    const data = {
      topic: "22127060/fan/set/turntime",
      message: JSON.stringify({
        title: "set_turntime",
        value: {
          start_date: startDateTimestamp.toString(),
          end_date: endDateTimestamp.toString(),
          start_time: startTime,
          end_time: endTime,
          mode: mode, // Adjust if necessary
        },
      }),
    };

    console.log("Payload to send:", data);

    // Submit the data
    submitData(data);
  });

  // Submit data function
  const submitData = (data) => {
    fetch("http://localhost:3000/api/publish_data", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log("Message published:", data);
      })
      .catch((error) => {
        console.error("Error publishing message:", error);
      });
  };

  const setDefault = () => {
    const currentDate = new Date();

    // Format date as YYYY-MM-DD
    const formattedDate = currentDate.toISOString().split("T")[0];

    // Format time as HH:MM (24-hour format)
    const formattedTime = currentDate.toTimeString().slice(0, 5);

    // Set default values
    document.getElementById("start-date").value = formattedDate;
    document.getElementById("end-date").value = formattedDate;
    document.getElementById("start-time").value = formattedTime;
    document.getElementById("end-time").value = formattedTime;
    document.getElementById("mode").value = 1;
  };
  window.onload = setDefault;


</script>